{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","items","console","log","listItems","map","value","className","id","key","type","text","onChange","e","setUpdate","target","icon","onClick","deleteItem","duration","easing","library","add","faTrash","faEdit","App","state","currentItems","handleInput","event","setState","Date","now","addItem","preventDefault","newItem","newItems","filteredItems","filter","onSubmit","this","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gVAoCeA,MA/Bf,SAAoBC,GAChB,IAAMC,EAAQD,EAAMC,MACpBC,QAAQC,IAAIF,GACZ,IAAMG,EAAYH,EAAMI,KAAI,SAAAC,GACxB,OAAO,yBAAKC,UAAU,OAAOC,GAAIF,EAAMG,KACnC,2BACI,2BACIC,KAAK,OACLF,GAAIF,EAAMG,IACVH,MAAOA,EAAMK,KACbC,SACI,SAACC,GACGb,EAAMc,UAAUD,EAAEE,OAAOT,MAAOA,EAAMG,QAIlD,8BACI,kBAAC,IAAD,CAAiBF,UAAU,UAAUS,KAAK,QAAQC,QAAS,kBAAMjB,EAAMkB,WAAWZ,EAAMG,cAKxG,OACI,6BACI,kBAAC,IAAD,CAAUU,SAAU,IAAKC,OAAO,eACvBhB,K,cCrBrBiB,IAAQC,IAAIC,KACZF,IAAQC,IAAIE,K,IAiGGC,E,4MA1EbC,MAAQ,CACNzB,MAAQ,GACR0B,aAAe,CACbhB,KAAO,GACPF,IAAM,K,EAIVmB,YAAc,SAACC,GACb,EAAKC,SAAS,CACZH,aAAc,CACZhB,KAAMkB,EAAMd,OAAOT,MACnBG,IAAKsB,KAAKC,U,EAKhBC,QAAU,SAACJ,GACTA,EAAMK,iBACN,IAAMC,EAAU,EAAKT,MAAMC,aAE3B,GADAzB,QAAQC,IAAIgC,GACQ,KAAjBA,EAAQxB,KAAa,CACtB,IAAMyB,EAAQ,sBAAO,EAAKV,MAAMzB,OAAlB,CAAyBkC,IACvC,EAAKL,SAAS,CACZ7B,MAAQmC,EACRT,aAAe,CACbhB,KAAO,GACPF,IAAM,Q,EAMdS,WAAa,SAACT,GACZ,IAAM4B,EAAgB,EAAKX,MAAMzB,MAAMqC,QAAO,SAAAhC,GAAK,OAAIA,EAAMG,MAAMA,KACnE,EAAKqB,SAAS,CACZ7B,MAAOoC,K,EAIXvB,UAAY,SAACH,EAAMF,GACjB,IAAMR,EAAQ,EAAKyB,MAAMzB,MACzBA,EAAMI,KAAI,SAAAC,GACLA,EAAMG,MAAQA,IACfH,EAAMK,KAAOA,MAGjB,EAAKmB,SAAS,CACZ7B,MAAOA,K,uDAOT,OACE,yBAAKM,UAAU,OACb,6CACA,4CACA,gCACE,0BAAMC,GAAG,aAAa+B,SAAUC,KAAKP,SACnC,2BAAOvB,KAAK,OAAO+B,YAAY,qBAAqBnC,MAAOkC,KAAKd,MAAMC,aAAahB,KAAMC,SAAU4B,KAAKZ,cACxG,4BAAQlB,KAAK,UAAb,aAIJ,kBAAC,EAAD,CAAWT,MAASuC,KAAKd,MAAMzB,MAAQiB,WAAcsB,KAAKtB,WAAYJ,UAAa0B,KAAK1B,iB,GApF9E4B,aCHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1D,QAAQ0D,MAAMA,EAAMC,c","file":"static/js/main.ce44575f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ListItems.css';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction ListItems (props) {\r\n    const items = props.items;\r\n    console.log(items);\r\n    const listItems = items.map(value =>{\r\n        return <div className=\"list\" id={value.key}>\r\n            <p>\r\n                <input \r\n                    type=\"text\" \r\n                    id={value.key} \r\n                    value={value.text} \r\n                    onChange={\r\n                        (e) => {\r\n                            props.setUpdate(e.target.value, value.key)\r\n                        }\r\n                    }\r\n                />\r\n                <span>\r\n                    <FontAwesomeIcon className=\"faIcons\" icon='trash' onClick={() => props.deleteItem(value.key)} />\r\n                </span> \r\n            </p>\r\n        </div>\r\n    });\r\n    return (\r\n        <div>\r\n            <FlipMove duration={300} easing=\"ease-in-out\">\r\n                    {listItems}\r\n            </FlipMove>     \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListItems;","import React, {Component} from 'react';\nimport './App.css';\nimport ListItems from './ListItems';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport {faTrash} from '@fortawesome/free-solid-svg-icons';\nimport {faEdit} from '@fortawesome/free-solid-svg-icons';\n\n\nlibrary.add(faTrash);\nlibrary.add(faEdit);\n\n\n// Tutorial https://www.youtube.com/watch?v=N8kYlimhuLw&t=https://www.youtube.com/watch?v=N8kYlimhuLw&t= \n\nclass App extends Component {\n\n  /* \n    constructor(props)\n  {\n    super(props);\n    this.state = {\n      items : [],\n      currentItems : {\n        text : '',\n        key : '',\n      }\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n  }\n  */\n\n  state = {\n    items : [],\n    currentItems : {\n      text : '',\n      key : '',\n    }\n  }\n\n  handleInput = (event) => {\n    this.setState({\n      currentItems: {\n        text: event.target.value,\n        key: Date.now(),\n      }\n    });\n  }\n\n  addItem = (event) => {\n    event.preventDefault();\n    const newItem = this.state.currentItems;\n    console.log(newItem);\n    if(newItem.text !== '') {\n      const newItems = [...this.state.items, newItem];\n      this.setState({\n        items : newItems,\n        currentItems : {\n          text : '',\n          key : ''\n        }\n      }) \n    } \n  }\n\n  deleteItem = (key) => {\n    const filteredItems = this.state.items.filter(value => value.key!==key);\n    this.setState({\n      items: filteredItems,\n    });\n  }\n\n  setUpdate = (text, key) => {\n    const items = this.state.items;\n    items.map(value => {\n      if(value.key === key) {\n        value.text = text;\n      }\n    });\n    this.setState({\n      items: items\n    })\n\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <h1>React Project</h1>\n        <h2> To do list </h2>\n        <header>\n          <form id=\"to-do-form\" onSubmit={this.addItem}>\n            <input type=\"text\" placeholder=\"Entrez votre liste\" value={this.state.currentItems.text} onChange={this.handleInput} />\n            <button type=\"submit\">Ajouter</button>\n          </form>\n        </header>\n\n        <ListItems items = {this.state.items}  deleteItem = {this.deleteItem} setUpdate = {this.setUpdate}/>\n\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}